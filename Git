working directory --> .git sub dir + A working tree
bare repo --> no .git sub dir + no working tree (all .git dir files under main dir)
Git --> uses ‘C’ language --> reducing the overhead of run times associated with high level languages 

revert a commit -->  git checkout a1e8fb5 hello.py
git checkout <Commit ID>
git revert <commit>

Create a new branch and checkout into it --> git checkout -b <new-branch-name>

Git pull = git fetch + git merge
working dir --staging area -- Local Repo -- remote repo
git merge master development
git push -u origin development ---> push changes to remote repo Development branch
git diff-tree -r commit_ID ---> list of files that has changed in a particular commit
git rebase development master
git rebase -i HEAD~3 ---> squash last N commits into a single commit
git branch --merged ---> check merged branches
git branch --no-merged ---> check unmerged branches

Git remote

git remote -v
git remote add origin <url>
git remote rm <name> --> remote the remote repo
git remote rename <old-name> <new-name> --> rename the remote repo
git fetch <remote>

git fetch origin Development
git branch -a
git log  remotes/origin/Development
git merge origin/Development

Delete a branch, first check out from the branch you want to delete and run -->
git branch -d development

Git stash
Git stash list
git stash apply
gits stash drop <Stash_ID>
Feature branching
A feature branch model keeps all of the changes for a particular feature inside
of a branch. When the feature is fully tested and validated by automated tests, the branch 
is then merged into master.

Task branching
In this model each task is implemented on its own branch with the task key included in the 
branch name. 

Release branching
Once the develop branch has acquired enough features for a release, you can clone that branch to
form a Release branch. Creating this branch starts the next release cycle, so no new features can
be added after this point, only bug fixes, documentation generation, and other release-oriented 
tasks should go in this branch. Once it is ready to ship, the release gets merged into master and
tagged with a version number. In addition, it should be merged back into develop branch, which may 
have progressed since the release was initiated.

to know if a branch has already been merged into master?
git branch –merged
git branch –no-merged


What is Git stash? (stack of unfinished changes)
 
 Often, when you’ve been working on part of your project, things are in a messy state and you want to switch branches 
 for sometime to work on something else. The problem is, you don’t want to do a commit of half-done work just so you 
 can get back to this point later. The answer to this issue is Git stash.
 
 Stashing takes your working directory that is, your modified tracked files and staged changes and saves it on a stack of
 unfinished changes that you can reapply at any time.
 
 What is Git stash drop?
 Git ‘stash drop’ command is used to remove the stashed item. It will remove the last added stash item by default, and 
 it can also remove a specific item if you include it as an argument.
 
 git stash list --> list all items in stack  example
 stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert “added file_size”
stash@{2}: WIP on master: 21d80a5 added number to log

if you want to remove a item fro stack use
git stash drop stash@{0}

How do you find a list of files that has changed in a particular commit?
git diff-tree -r commit_ID

-r flag makes the command list individual files

What does commit object contains?
A set of files, representing the state of a project at a given point of time
Reference to parent commit objects
An SHAI name, a 40 character string that uniquely identifies the commit object.

How can you create a repository in Git?
Git init

refs/heads/master ---> refs/of/master

How do you configure a Git repository to run code sanity checking tools right before making commits, 
and preventing them if the test fails?
 
 
 
 
